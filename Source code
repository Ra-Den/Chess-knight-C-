#include <iostream>
#include <stdlib.h>
#include <Windows.h>

using namespace std;

int Check(int Number);

void main()
{
    setlocale(LC_ALL, "rus");
    int
        size,                   // Переменная хранящая длину одной из сторон доски
        Cur_pos[] = { 0,0 },    // Переменная хранящая текущую позицию коня
        trigger = 0,            // Переменная хранящая информацию когда циклу алгоритма следует завершится
        min,                    // Переменная хранящая в себе значение клетки с минимальным количество возможных ходов
        flag,                   // Флаговая переменная определяющая является ли элемент для сравнения первым
        count = 1;              // Переменная хранящая значение текущего шага коня

    //Диалог
    while (true) {
        cout << "Введите длину одной стороны доски(от 8 до 76) :\n";
        cin >> size;
        Check(size);
        if (size >= 8 && size <= 76) {
            break;
        }
        else {
            cout<<"Была допущена ошибка при вводе\n";

        }
    }
    cout<< "Была построена доска " << size << "х" << size << ". Где 0-означает не посещенную клетку, а цифры от 1 до " << size * size << " поля посещенные на определенном шаге\n";
    while (true) {
        cout << "Введите первую координату начальной позиции коня : \n";
        cin>>Cur_pos[1];
        Check(Cur_pos[1]);
        Cur_pos[1]--;
        cout<<"Введите вторую координату начальной позиции коня:\n";
        cin >> Cur_pos[0];
        Cur_pos[0]--;
        Check(Cur_pos[0]);
        if (Cur_pos[0] >= 0 && Cur_pos[0] < size && Cur_pos[1] >= 0 && Cur_pos[1] < size) {
            break;
        }
        else {
            cout<<"Была допущена ошибка при вводе";
        }
    }
    cout << "Начальная позиция коня: " << (Cur_pos[1] + 1) << "," << (Cur_pos[0] + 1) << "\n";

    //Инициализация переменных
    int horse_moves[8][2]= { 
            {1,2},
            {-1,2},
            {1,-2},
            {-1,-2},
            {2,1},
            {-2,1},
            {2,-1},
            {-2,-1} };                  //Максимальное количество возможных перемещений коня
    int** Board = new int*[size];
    for (int i = 0; i < size; i++) {
        Board[i] = new int[size];
    };                                  // Массив хранящий доску со всеми перемещениями коня по ней
    int** Pos_move = new int* [size];
    for (int i = 0; i < size; i++) {
        Pos_move[i] = new int[size];
    };                                  //Массив хранящий доску с информациях про возможное количество ходов из каждой клетки
    
    //Обнуление массивов
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            Board[i][j] = 0;
            Pos_move[i][j] = 0;
        }
    }

    //Создания доски с количеством шагов для каждой клетки
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            for (int k = 0; k < 8; k++) {
                if (i + horse_moves[k][0] >= 0 && i + horse_moves[k][0] < size && j + horse_moves[k][1] >= 0 && j + horse_moves[k][1] < size) {
                    Pos_move[i][j]++;
                }
            }
        }
    }

    //Алгоритм обхода конем доски
    while (trigger != size * size) {
        trigger++;
        Pos_move[Cur_pos[0]][Cur_pos[1]] = 0;
        Board[Cur_pos[0]][Cur_pos[1]] = count++;
        int Prev_pos[] = { Cur_pos[0],Cur_pos[1] }; // Переменная предыдущей позиции коня
        flag = 0;
        for (int k = 0; k < 8; k++) {
            if (Prev_pos[0] + horse_moves[k][0] >= 0 && Prev_pos[0] + horse_moves[k][0] < size && Prev_pos[1] + horse_moves[k][1] >= 0 && Prev_pos[1] + horse_moves[k][1] < size) {
                if (flag == 0 && Pos_move[Prev_pos[0] + horse_moves[k][0]][Prev_pos[1] + horse_moves[k][1]] != 0) {
                    min = Pos_move[Prev_pos[0] + horse_moves[k][0]][Prev_pos[1] + horse_moves[k][1]];
                    Cur_pos[0] = (Prev_pos[0] + horse_moves[k][0]);
                    Cur_pos[1] = (Prev_pos[1] + horse_moves[k][1]);
                    flag = 1;


                }
                else if (Pos_move[Prev_pos[0] + horse_moves[k][0]][Prev_pos[1] + horse_moves[k][1]] < min && Pos_move[Prev_pos[0] + horse_moves[k][0]][Prev_pos[1] + horse_moves[k][1]] != 0) {
                    min = Pos_move[Prev_pos[0] + horse_moves[k][0]][Prev_pos[1] + horse_moves[k][1]];
                    Cur_pos[0] = (Prev_pos[0] + horse_moves[k][0]);
                    Cur_pos[1] = (Prev_pos[1] + horse_moves[k][1]);
                }
                if (Pos_move[Prev_pos[0] + horse_moves[k][0]][Prev_pos[1] + horse_moves[k][1]] != 0)
                    Pos_move[Prev_pos[0] + horse_moves[k][0]][Prev_pos[1] + horse_moves[k][1]]--;
            }
        }
        //Задержка при выводе результатов
        Sleep(500);
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                cout << Board[i][j] << "\t";
            }
            cout << endl;
        }
        cout << endl;
    }
    //Очистка динамической памяти
    for (int i = 0; i < size; i++) {
        delete[] Board[i];
        delete[] Pos_move[i];
    }
}

int Check(int Number) {
        if (cin.fail()) {
            cin.clear();
            cin.ignore(32767, '\n');
            Number=-1;
        }
    return Number;
}
